function Get-VulnerabilityReport {
    [CmdletBinding(DefaultParameterSetName = 'IPAddress')]
    [Alias('gvr', 'vulnreport')]
    [OutputType([VulnerabilityReportEntry])]
    Param
    (
        [Parameter(Mandatory = $true, ValueFromPipeline = $false, ValueFromPipelineByPropertyName = $true, Position = 0, ParameterSetName = "IPAddress")][ValidateNotNullOrEmpty()][Alias('i', 'ip')][System.Net.IPAddress]$IPAddress,
        [Parameter(Mandatory = $true, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Position = 0, ParameterSetName = "HostName")][ValidateLength(1, 250)][Alias('ComputerName', 'Name', 'h')][String]$HostName
    )
    BEGIN {
        class VulnerabilityReportEntry {
            [System.Net.IPAddress]$IPAddress
            [string]$HostNames
            [string]$Ports
            [string]$CveID
            [Nullable[DateTime]]$Published
            [Nullable[DateTime]]$LastModified
            [string]$Description
            [float]$BaseScore
            [string]$BaseSeverity
            [float]$ExploitabilityScore
            [float]$ImpactScore
            [string]$AttackVector
            [string]$AttackComplexity
            [string]$PrivilegesRequired
            [string]$UserInteraction
            [string]$ConfidentialityImpact
            [string]$IntegrityImpact
            [string]$AvailabilityImpact
            [System.Security.Cryptography.X509Certificates.X509Certificate2]$TlsCertificate
        }
    }
    PROCESS {
        $shodanInfo = $null
        if ($PSBoundParameters.ContainsKey("IPAddress")) {
            $shodanInfo = Get-ShodanInformation -IPAddress $IPAddress
        }
        else {
            $shodanInfo = Get-ShodanInformation -HostName $HostName
        }

        [bool]$vulnsFound = $shodanInfo.HasVulnerabilities

        $targetIP = $shodanInfo.IPAddress

        $cveInfoList = $null
        if ($vulnsFound) {
            $vulnerabilityList = $shodanInfo | Select-Object -ExpandProperty Vulnerabilities
            $vulnCount = $vulnerabilityList.Count

            $outputMessage = "{0} vulnerabilities found on {1}. Generating report now." -f $vulnCount, $targetIP
            Write-Host -Object $outputMessage -ForegroundColor Red

            $cveInfoList = $vulnerabilityList | Get-CveInformation

            if ($null -ne $cveInfoList) {
                $cveInfoList | ForEach-Object {
                    $vulnReportEntry = [VulnerabilityReportEntry]::new()

                    $vulnReportEntry.IPAddress = $targetIP
                    $vulnReportEntry.HostNames = ($shodanInfo.HostNames -join ", ")
                    $vulnReportEntry.Ports = ($shodanInfo.Ports -join ", ")

                    $vulnReportEntry.CveID = $_.CveID
                    $vulnReportEntry.Published = $_.Published
                    $vulnReportEntry.LastModified = $_.LastModified
                    $vulnReportEntry.Description = $_.Description
                    $vulnReportEntry.BaseScore = $_.BaseScore
                    $vulnReportEntry.BaseSeverity = $_.BaseSeverity
                    $vulnReportEntry.ExploitabilityScore = $_.ExploitabilityScore
                    $vulnReportEntry.ImpactScore = $_.ImpactScore
                    $vulnReportEntry.AttackVector = $_.AttackComplexity
                    $vulnReportEntry.AttackComplexity = $_.AttackVector
                    $vulnReportEntry.PrivilegesRequired = $_.PrivilegesRequired
                    $vulnReportEntry.UserInteraction = $_.UserInteraction
                    $vulnReportEntry.ConfidentialityImpact = $_.ConfidentialityImpact
                    $vulnReportEntry.IntegrityImpact = $_.IntegrityImpact
                    $vulnReportEntry.AvailabilityImpact = $_.AvailabilityImpact

                    $vulnReportEntry.TlsCertificate = $shodanInfo.TlsCertificate

                    return $vulnReportEntry
                }
            }
        }
        else {
            $outputMessage = "0 vulnerabilities found on {0}." -f $targetIP
            Write-Host -Object $outputMessage -ForegroundColor Green
        }
    }
}
